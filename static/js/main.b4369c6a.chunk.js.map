{"version":3,"sources":["avatar.jpg","Joke.jsx","steps.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","JokeContainer","styled","div","_templateObject","Joke","state","joke","fetchJoke","_callee","res","_ref2","regenerator_default","a","wrap","_context","prev","next","fetch","headers","Accept","sent","json","_this","setState","stop","this","_this2","react_default","createElement","onClick","props","triggerNextStep","Component","steps","id","message","trigger","user","options","value","label","validator","isNaN","concat","component","src_Joke","waitAction","end","theme","background","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","App","showBot","data","className","styled_components_browser_esm","react_simple_chatbot_default","botAvatar","avatar","recognitionEnable","speechSynthesis","enable","lang","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4369c6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.8eb88d51.jpg\";","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst JokeContainer = styled.div`\n  color: #282c34;\n  button {\n    border: none;\n    padding: 1em;\n    background: #282c34;\n    color: white;\n    margin: 10px;\n    border-radius: 3px;\n  }\n`;\n\nclass Joke extends Component {\n  state = {\n    joke: \"Thinking...\"\n  };\n\n  fetchJoke = async () => {\n    const res = await fetch(\"https://icanhazdadjoke.com/\", {\n      headers: {\n        Accept: \"application/json\"\n      }\n    });\n    const { joke } = await res.json();\n    this.setState({ joke });\n  };\n\n  componentDidMount() {\n    this.fetchJoke();\n  }\n\n  render() {\n    const { joke } = this.state;\n    return (\n      <JokeContainer>\n        {joke && <p>{joke}</p>}\n        <button onClick={this.fetchJoke}>Give me another one</button>\n        <button onClick={() => this.props.triggerNextStep()}>Continue</button>\n      </JokeContainer>\n    );\n  }\n}\n\nexport default Joke;\n","import React from \"react\";\nimport Joke from \"./Joke\";\nexport const steps = [\n  {\n    id: \"0\",\n    message:\n      \"Hi, I'm Jaksa's chatbot designed to convince you to work with me.\",\n    trigger: \"20\"\n  },\n  {\n    id: \"20\",\n    message:\n      \"Note that you can always press the mic icon to talk to me :)\",\n    trigger: \"1\"\n  },\n  {\n    id: \"1\",\n    message: \"What is your name?\",\n    trigger: \"2\"\n  },\n  {\n    id: \"2\",\n    user: true,\n    trigger: \"3\"\n  },\n  {\n    id: \"3\",\n    message: \"Pleased to meet you, {previousValue}!\",\n    trigger: \"4\"\n  },\n  {\n    id: \"4\",\n    message:\n      \"The chatbot that my creator is going to build for you will do financial calculations, but before that I would like to show you what I can do.\",\n    trigger: \"5\"\n  },\n  {\n    id: \"4\",\n    message:\n      \"Lets start with few example options to condition the flow of conversation, answering each will produce different flow.\",\n    trigger: \"5\"\n  },\n  {\n    id: \"5\",\n    options: [\n      { value: \"Option 1\", label: \"Option 1\", trigger: \"6\" },\n      { value: \"Option 2\", label: \"Option 2\", trigger: \"7\" }\n    ]\n  },\n  {\n    id: \"6\",\n    message:\n      \"Nice, you chose Option 1! I could direct you to some action, but I am not programmed to do that now.\",\n    trigger: \"8\"\n  },\n  {\n    id: \"7\",\n    message:\n      \"Option 2 was interesting I agree, but I don't know what to do from now, after all, I'm just an example.\",\n    trigger: \"8\"\n  },\n  {\n    id: \"8\",\n    message: \"Do you want to choose again?\",\n    trigger: \"9\"\n  },\n  {\n    id: \"9\",\n    options: [\n      { value: \"I'm curious\", label: \"I'm curious\", trigger: \"5\" },\n      { value: \"I get the point\", label: \"I get the point\", trigger: \"10\" }\n    ]\n  },\n  {\n    id: \"10\",\n    message: \"Ok, let's move on!\",\n    trigger: \"11\"\n  },\n  {\n    id: \"11\",\n    message:\n      \"I could definitely show you some validations I can do, you will need this for every calculation!\",\n    trigger: \"12\"\n  },\n  {\n    id: \"12\",\n    message: \"Try to enter anything other than numbers.\",\n    trigger: \"13\"\n  },\n  {\n    id: \"13\",\n    user: true,\n    validator: value => {\n      if (isNaN(value)) {\n        return `We can't do simple math with ${value}!`;\n      }\n      return true;\n    },\n    trigger: \"15\"\n  },\n  {\n    id: \"15\",\n    message: \"Great, want to hear a joke?\",\n    trigger: \"16\"\n  },\n  {\n    id: \"16\",\n    component: <Joke />,\n    waitAction: true,\n    trigger: \"17\"\n  },\n  {\n    id: \"17\",\n    message:\n      \"I'm still a chatbot, my jokes may not be funny, but they sure are fetched from external API!\",\n    trigger: \"18\"\n  },\n  {\n    id: \"18\",\n    message:\n      \"I'm still a chatbot, my jokes may not be funny, but they sure are fetched from external API!\",\n    trigger: \"19\"\n  },\n  {\n    id: \"19\",\n    message: \"I hope I served my purpose, Goodbye!\",\n    end: true\n  }\n];\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ChatBot from \"react-simple-chatbot\";\nimport { steps } from \"./steps\";\nimport { ThemeProvider } from \"styled-components\";\nimport avatar from \"./avatar.jpg\"\n\nconst theme = {\n  background: \"#f5f8fb\",\n  headerBgColor: \"#2fa28a\",\n  headerFontColor: \"#fff\",\n  headerFontSize: \"16px\",\n  botBubbleColor: \"#2fa28a\",\n  botFontColor: \"#fff\",\n  userBubbleColor: \"#fff\",\n  userFontColor: \"#4a4a4a\"\n};\n\nclass App extends Component {\n  state = {\n    showBot: true,\n    data: null\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <ThemeProvider theme={theme}>\n            <ChatBot\n              botAvatar={avatar}\n              steps={steps}\n              recognitionEnable={true}\n              speechSynthesis={{ enable: true, lang: \"en\" }}\n            />\n          </ThemeProvider>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}